---
commonOverlays:
  - name: "add common labels"
    query:
      - metadata.labels
    action: merge
    value:
      platform.klearwave.io/capability: "{{ .capability }}"
      platform.klearwave.io/component: "{{ .component }}"
      platform.klearwave.io/operator-version: "{{ .operatorVersion }}"
      platform.klearwave.io/platform-version: "{{ .platformVersion }}"
      app.kubernetes.io/version: "{{ .projectVersion }}"
      app.kubernetes.io/part-of: platform
      app.kubernetes.io/managed-by: certificates-operator

  - name: "add common labels to pod template"
    query: "spec.template.metadata.labels"
    value:
      platform.klearwave.io/capability: "{{ .capability }}"
      platform.klearwave.io/component: "{{ .component }}"
      platform.klearwave.io/operator-version: "{{ .operatorVersion }}"
      platform.klearwave.io/platform-version: "{{ .platformVersion }}"
      app.kubernetes.io/version: "{{ .projectVersion }}"
      app.kubernetes.io/part-of: platform
      app.kubernetes.io/managed-by: certificates-operator

  - name: "add namespace markers"
    query:
      - metadata.namespace
      - subjects[*].namespace
      - "webhooks[*].clientConfig.service.namespace"
    value: "{{ .defaultNamespace }}"  # +operator-builder:field:name=namespace,default="{{ .defaultNamespace }}",type=string

  - name: "add node selector"
    query:
      - spec.template.spec.nodeSelector
    value:
      platform.klearwave.io/node-type: platform

  - name: "ensure leader election namespace is updated"
    query: spec.template.spec.containers[*].args[?(@ =~ /^--leader-election-namespace/)]
    value: --leader-election-namespace=$(POD_NAMESPACE)

  - name: "ensure pod security context is updated"
    query: spec.template.spec.securityContext
    action: replace
    value:
      fsGroup: 1001
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true

  - name: "ensure container security context is updated"
    query: spec.template.spec.containers[*].securityContext
    action: replace
    onMissing:
      action: inject
    value:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]

yamlFiles:
  - name: "cert-manager deployments"
    path: "../../vendor/cert-manager.yaml"
    outputPath: "certificates/cert-manager/deployment.yaml"
    overlays:
      - name: "ensure we are only acting upon controller deployment resources"
        query: "$"
        action: delete
        documentQuery:
          - conditions:
              - query: $[?($.kind != "Deployment")]

      #
      # cert-manager controller
      #
      - name: "add controller markers"
        documentQuery:
          - conditions:
            - query: $[?($.metadata.name == "cert-manager")]
        value:
          spec:
            # +operator-builder:field:name=controller.replicas,default="{{ .controller.replicas }}",type=int,description=`
            # Number of replicas to use for the cert-manager controller deployment.`
            replicas: !!int {{ .controller.replicas }}

      - name: "add controller container markers"
        query: "spec.template.spec.containers[?(@.name == 'cert-manager-controller')]"
        value:
          # +operator-builder:field:name=controller.image,default="%v",type=string,description=`
          # Image to use for cert-manager controller deployment.`
          image: "%v"
          resources:
            requests:
              # +operator-builder:field:name=controller.resources.requests.cpu,default="{{ .controller.resources.requests.cpu }}",type=string,description=`
              # CPU requests to use for cert-manager controller deployment.`
              cpu: "{{ .controller.resources.requests.cpu }}"
              # +operator-builder:field:name=controller.resources.requests.memory,default="{{ .controller.resources.requests.memory }}",type=string,description=`
              # Memory requests to use for cert-manager controller deployment.`
              memory: "{{ .controller.resources.requests.memory }}"
            limits:
              # +operator-builder:field:name=controller.resources.limits.memory,default="{{ .controller.resources.limits.memory }}",type=string,description=`
              # Memory limits to use for cert-manager controller deployment.`
              memory: "{{ .controller.resources.limits.memory }}"

      - name: "set controller pod anti-affinity"
        documentQuery:
          - conditions:
            - query: $[?($.metadata.name == "cert-manager")]
        query: spec.template.spec
        action: merge
        value:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    topologyKey: kubernetes.io/hostname
                    labelSelector:
                      matchExpressions:
                        - key: app.kubernetes.io/name
                          operator: In
                          values:
                            - cert-manager
          nodeSelector:
            kubernetes.io/os: linux

      #
      # cert-manager injector
      #
      - name: "add injector markers"
        documentQuery:
          - conditions:
            - query: $[?($.metadata.name == "cert-manager-cainjector")]
        value:
          spec:
            # +operator-builder:field:name=injector.replicas,default="{{ .injector.replicas }}",type=int,description=`
            # Number of replicas to use for the cert-manager cainjector deployment.`
            replicas: !!int {{ .injector.replicas }}

      - name: "add injector container markers"
        query: "spec.template.spec.containers[?(@.name == 'cert-manager-cainjector')]"
        value:
          # +operator-builder:field:name=injector.image,default="%v",type=string,description=`
          # Image to use for cert-manager CA injector deployment.`
          image: "%v"
          resources:
            requests:
              # +operator-builder:field:name=injector.resources.requests.cpu,default="{{ .injector.resources.requests.cpu }}",type=string,description=`
              # CPU requests to use for cert-manager CA injector deployment.`
              cpu: "{{ .injector.resources.requests.cpu }}"
              # +operator-builder:field:name=injector.resources.requests.memory,default="{{ .injector.resources.requests.memory }}",type=string,description=`
              # Memory requests to use for cert-manager CA injector deployment.`
              memory: "{{ .injector.resources.requests.memory }}"
            limits:
              # +operator-builder:field:name=injector.resources.limits.memory,default="{{ .injector.resources.limits.memory }}",type=string,description=`
              # Memory limits to use for cert-manager CA injector deployment.`
              memory: "{{ .injector.resources.limits.memory }}"

      - name: "set injector pod anti-affinity"
        documentQuery:
          - conditions:
            - query: $[?($.metadata.name == "cert-manager")]
        query: spec.template.spec
        action: merge
        value:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    topologyKey: kubernetes.io/hostname
                    labelSelector:
                      matchExpressions:
                        - key: app.kubernetes.io/name
                          operator: In
                          values:
                            - cert-manager-cainjector
          nodeSelector:
            kubernetes.io/os: linux
  
      #
      # cert-manager webhook
      #
      - name: "add webhook markers"
        documentQuery:
          - conditions:
            - query: $[?($.metadata.name == "cert-manager-webhook")]
        value:
          spec:
            # +operator-builder:field:name=webhook.replicas,default="{{ .webhook.replicas }}",type=int,description=`
            # Number of replicas to use for the cert-manager webhook deployment.`
            replicas: !!int {{ .webhook.replicas }}

      - name: "add webhook container markers"
        query: "spec.template.spec.containers[?(@.name == 'cert-manager-webhook')]"
        value:
          # +operator-builder:field:name=webhook.image,default="%v",type=string,description=`
          # Image to use for cert-manager webhook deployment.`
          image: "%v"
          resources:
            requests:
              # +operator-builder:field:name=webhook.resources.requests.cpu,default="{{ .webhook.resources.requests.cpu }}",type=string,description=`
              # CPU requests to use for cert-manager webhook deployment.`
              cpu: "{{ .webhook.resources.requests.cpu }}"
              # +operator-builder:field:name=webhook.resources.requests.memory,default="{{ .webhook.resources.requests.memory }}",type=string,description=`
              # Memory requests to use for cert-manager webhook deployment.`
              memory: "{{ .webhook.resources.requests.memory }}"
            limits:
              # +operator-builder:field:name=webhook.resources.limits.memory,default="{{ .webhook.resources.limits.memory }}",type=string,description=`
              # Memory limits to use for cert-manager webhook deployment.`
              memory: "{{ .webhook.resources.limits.memory }}"

      - name: "set webhook pod anti-affinity"
        documentQuery:
          - conditions:
            - query: $[?($.metadata.name == "cert-manager")]
        query: spec.template.spec
        action: merge
        value:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    topologyKey: kubernetes.io/hostname
                    labelSelector:
                      matchExpressions:
                        - key: app.kubernetes.io/name
                          operator: In
                          values:
                            - cert-manager-webhook
          nodeSelector:
            kubernetes.io/os: linux
