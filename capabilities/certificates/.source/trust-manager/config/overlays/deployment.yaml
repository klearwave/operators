---
commonOverlays:
  - name: "add common labels"
    query:
      - metadata.labels
    action: merge
    value:
      platform.klearwave.io/capability: "{{ .capability }}"
      platform.klearwave.io/component: "{{ .component }}"
      platform.klearwave.io/operator-version: "{{ .operatorVersion }}"
      platform.klearwave.io/platform-version: "{{ .platformVersion }}"
      app.kubernetes.io/part-of: platform
      app.kubernetes.io/managed-by: certificates-operator

  - name: "add selector labels"
    query:
      - spec.selector.matchLabels
    action: merge
    value:
      platform.klearwave.io/capability: "{{ .capability }}"
      platform.klearwave.io/component: "{{ .component }}"
      platform.klearwave.io/operator-version: "{{ .operatorVersion }}"
      platform.klearwave.io/platform-version: "{{ .platformVersion }}"

  - name: "add common labels to pod template"
    query: "spec.template.metadata.labels"
    value:
      platform.klearwave.io/capability: "{{ .capability }}"
      platform.klearwave.io/component: "{{ .component }}"
      platform.klearwave.io/operator-version: "{{ .operatorVersion }}"
      platform.klearwave.io/platform-version: "{{ .platformVersion }}"
      app.kubernetes.io/part-of: platform
      app.kubernetes.io/managed-by: certificates-operator

  - name: "remove redundant labels and potential helm data"
    query: 
      - metadata.labels["helm.sh/chart"]
      - spec.template.metadata.labels["helm.sh/chart"]
      - metadata.annotations["helm.sh/resource-policy"]
      - metadata.labels["app"]
      - metadata.labels["app.kubernetes.io/instance"]
      - metadata.labels["app.kubernetes.io/component"]
      - spec.template.metadata.labels["app"]
      - spec.template.metadata.labels["app.kubernetes.io/instance"]
      - spec.template.metadata.labels["app.kubernetes.io/component"]
      - spec.selector.matchLabels["app"]
      - spec.selector.matchLabels["app.kubernetes.io/instance"]
      - spec.selector.matchLabels["app.kubernetes.io/component"]
      - spec.selector["app.kubernetes.io/instance"]
      - spec.selector["app.kubernetes.io/component"]
    action: delete

  - name: "add node selector"
    query:
      - spec.template.spec.nodeSelector
    value:
      platform.klearwave.io/node-type: platform

yamlFiles:
  - name: "trust-manager deployment"
    path: "../../vendor/trust-manager.yaml"
    outputPath: "certificates/trust-manager/deployment.yaml"
    overlays:
      - name: "ensure we are only acting upon deployment resources"
        query: "$"
        action: delete
        documentQuery:
          - conditions:
              - query: $[?($.kind != "Deployment")]

      - name: "add namespace markers"
        query:
          - metadata.namespace
        value: "{{ .defaultNamespace }}"  # +operator-builder:field:name=namespace,default="{{ .defaultNamespace }}",type=string

      - name: "add controller replica count marker"
        query: spec
        value:
          # +operator-builder:field:name=controller.replicas,default="%v",type=int,description=`
          # Number of replicas to use for the trust-manager controller deployment.`
          replicas: !!int "%v"

      - name: "ensure trust namespace is updated"
        query: spec.template.spec.containers[?(@.name == "trust-manager")].args[?(@ =~ /^--trust-namespace/)]
        value: "--trust-namespace={{ .defaultNamespace }}" # +operator-builder:field:name=namespace,replace={{ .defaultNamespace }},default="{{ .defaultNamespace }}",type=string

      - name: "ensure container security context is updated"
        query: spec.template.spec.containers[*].securityContext
        action: replace
        onMissing:
          action: inject
        value:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]

      - name: "add controller resources and image name markers"
        query: "spec.template.spec.containers[?(@.name == 'trust-manager')]"
        value:
          # +operator-builder:field:name=controller.image,default="%v",type=string,description=`
          # Image to use for trust-manager controller deployment.`
          image: "%v"
          resources:
            requests:
              # +operator-builder:field:name=controller.resources.requests.cpu,default="{{ .controller.resources.requests.cpu }}",type=string,description=`
              # CPU requests to use for trust-manager controller deployment.`
              cpu: "{{ .controller.resources.requests.cpu }}"
              # +operator-builder:field:name=controller.resources.requests.memory,default="{{ .controller.resources.requests.memory }}",type=string,description=`
              # Memory requests to use for trust-manager controller deployment.`
              memory: "{{ .controller.resources.requests.memory }}"
            limits:
              # +operator-builder:field:name=controller.resources.limits.memory,default="{{ .controller.resources.limits.memory }}",type=string,description=`
              # Memory limits to use for trust-manager controller deployment.`
              memory: "{{ .controller.resources.limits.memory }}"

      - name: "ensure controller affinity is set"
        query: spec.template.spec
        action: merge
        value:
          securityContext:
            fsGroup: 1001
            runAsUser: 1001
            runAsGroup: 1001
            runAsNonRoot: true
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    topologyKey: kubernetes.io/hostname
                    labelSelector:
                      matchExpressions:
                        - key: app.kubernetes.io/name
                          operator: In
                          values:
                            - trust-manager
          nodeSelector:
            kubernetes.io/os: linux

      - name: "adjust secret name"
        query: spec.template.spec.volumes[?(@.name == "tls")].secret.secretName
        value: trust-manager-cert
